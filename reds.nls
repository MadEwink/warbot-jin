;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe Toni Ombre Mad
;; prÃ©fixe : tom
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Parameters below

globals [
  tom-init-nbr-explorers
  tom-init-nbr-harvesters
  tom-proportion-kamikaze
  tom-harvester-job-switch  ;; the higher this is, the lower farmers we'll have
]

to tom-init-parameters
  set tom-init-nbr-explorers 10
  set tom-init-nbr-harvesters 1
  set tom-proportion-kamikaze 100
  set tom-harvester-job-switch 50
end

to red-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to red-team-go-back-to-base
  if (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
        set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
  ]
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to red-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
      [ set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
  ]
  [ random-move ]
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end

to tom-explorer-get-food-info [ robot ]
  ;;if the robot is an explorer or harvester, and it has found food, update self state
  if ( [breed] of robot = Explorers OR [breed] of robot = Harvesters )
  [
    if ( item 0 [mem0] of robot = 1)
    [
      set mem0 list 1 0
      set mem1 [mem1] of robot
    ]
  ]
end

to tom-switch-to-kamikaze-or-return-base
  let random-number random 100
  ifelse (random-number < tom-proportion-kamikaze)
  [
    set mem0 list 4 0
  ][
    set mem0 list 3 0
  ]
end

to tom-explorer-get-enemy-base-info [ robot ]
  if ( [breed] of robot = Explorers )
  [
    if ([mem2] of robot = 0 AND item 0 [mem0] of robot = 3 OR item 0 [mem0] of robot = 4 )
    [
      tom-switch-to-kamikaze-or-return-base
      set mem1 [mem1] of robot
      set mem2 0
      ;; if base knows indicated enemy base, force kamikaze
      if (item 1 [mem3] of robot = 1)
      [
        set mem3 replace-item 1 mem3 1
        set mem0 list 4 0
      ]
    ]
    ;; if enemy indicates a destroyed base and it is current base, propagate information
    if ([mem2] of robot = 1 AND item 0 mem1 = item 0 [mem1] of robot AND item 1 mem1 = item 1 [mem1] of robot)
    [
      set mem0 list 2 0
      set mem2 1
    ]
  ]
end

to tom-move-random-direction
  if (free-ahead? speed != NOBODY)
  [
    set heading random 360
  ]
  if (free-ahead? speed = NOBODY)
  [
    forward-move speed
  ]
end

;; returns true if it keeps moving towards the base, false if it is too close
to-report tom-move-back-to-base
  let closest-base min-one-of my-bases [distance myself]
  set heading towards closest-base
  if (distance closest-base > detection-range / 2)
  [
    ifelse (free-ahead? speed != NOBODY)
    [
      tom-move-random-direction
    ][
      forward-move speed
    ]
    report TRUE
  ]
  report FALSE
end

to tom-move-to-food
  let foodx item 0 mem1
  let foody item 1 mem1
  
  if (abs(foodx - xcor) < 1 and abs(foody - ycor) < 1) [
    set mem1 list 0 0
    set mem0 replace-item 0 mem0 0
  ]
  
  facexy foodx foody
  ;;set heading towards angle-to-food
  ;; TODO may collide with a wall
  ifelse (free-ahead? speed != NOBODY)
    [
      tom-move-random-direction
    ][
      forward-move speed
  ]
end

;; will take food and change state if in range
to tom-harvester-take-food
  set mem2 0
  let b min-one-of perceive-food [ distance self ]
  ;; if resource in range :
  if (b != nobody and distance b < 2)[
    take-food b
    ;; switch to state 2, to return to base
    set mem0 replace-item 0 mem0 2
    set mem2 1
  ]
end

to goRedExplorer
  ;;find nearby friend robots
  let friend-robots [self] of perceive-robots color
  ;; switch case on the state of self
  ;; 0 Wandering : goes in random directions, while trying to dodge objects
  ;; 1 Returns to base
  ;; 2 Find enemy base
  ;; 3 Return to base
  ;; 4 Suicide squad
  if (item 0 mem0 = 0)
  [
    ;;move in a random direction avoiding obstacles
    tom-move-random-direction
    ;;find food
    let foods perceive-food
    if (any? foods)
    [
      ;;register food location and switch to state 1
      let food min-one-of foods [distance myself]
      set mem0 list 1 0
      let foodx [xcor] of food
      let foody [ycor] of food
      set mem1 list foodx foody
    ]
    ;;find explorer or harvester knowing food location
    foreach friend-robots
    [
      robot -> tom-explorer-get-food-info robot
    ]
  ]
  ;;return to base
  if (item 0 mem0 = 1 OR item 0 mem0 = 3)
  [
    if (NOT tom-move-back-to-base)
    [
      let closest-base min-one-of my-bases [distance myself]
      ifelse (item 0 mem0 = 1)
      [
        ask closest-base [
          set mem2 [mem1] of myself
        ]
        set mem3 replace-item 0 mem3 1
      ][
        ask closest-base [
          set mem3 [mem1] of myself
        ]
        set mem3 replace-item 1 mem3 1
      ]
      set mem0 list 2 0
    ]
  ]
  ;;search enemy base
  if (item 0 mem0 = 2)
  [
    tom-move-random-direction
    let enemy-bases perceive-base ennemy
    if (any? enemy-bases)
    [
      let closest-enemy-base min-one-of enemy-bases [distance myself]
      let ceb-x [xcor] of closest-enemy-base
      let ceb-y [ycor] of closest-enemy-base
      set mem1 list ceb-x ceb-y
      set mem2 0
      tom-switch-to-kamikaze-or-return-base
    ]
    foreach friend-robots
    [
      robot -> tom-explorer-get-enemy-base-info robot
    ]
  ]
  ;;kamikaze into enemy base
  if ( item 0 mem0 = 4 )
  [
    ;;if we are close to the enemy base but it's not here, switch to state 2
    if (distancexy item 0 mem1 item 1 mem1 < detection-range AND NOT any? perceive-base ennemy)
    [
      set mem0 list 2 0
      set mem1 1
    ]
    foreach friend-robots
    [
      robot -> tom-explorer-get-enemy-base-info robot
    ]
    facexy item 0 mem1 item 1 mem1
    forward-move speed
  ]
end

to goRedRocketLauncher
  
end

to goRedHarvester
  ;; switch case on the state of self
  ;; 0 Wandering : goes in random directions, while trying to dodge objects
  ;; 1 Collecting : goes to a resource location known or indicated by an Explorer
  ;; 2 Retrieving : brings a resource bask to the base
  ;; 3 Farming : Plant seeds and harvest seeds around base
  
  ;;find nearby friend robots
  let friend-robots [self] of perceive-robots color
  
  ifelse (mem2 = 1)[
    ;; try to find food and move towards it
    let b min-one-of perceive-food [ distance self ]
    ;; if resource in range :
    if (b != nobody)[
      set mem1 list [xcor] of b [ycor] of b
    ]
    tom-move-to-food
    tom-harvester-take-food
  ]
  [
    ifelse (item 0 mem0 = 0) [
      tom-harvester-take-food
      ;; use the random dir of MadEwink
      tom-move-random-direction
      ;;find explorer or harvester knowing food location
      foreach friend-robots
      [
        robot -> tom-explorer-get-food-info robot
      ]
      ifelse (item 0 mem1 != 0) [
        set mem0 replace-item 0 mem0 1
      ][
      ]
    ][
      ifelse (item 0 mem0 = 1) [
        ;; collecting resources
        
        foreach friend-robots
        [
          robot -> tom-explorer-get-food-info robot
        ]
        tom-move-to-food
        
        tom-harvester-take-food
        
        ;; if close, then give food and switch state
        let c min-one-of my-bases [ distance myself ]
        if (c != nobody) [
          if (distance c <= 2) [
            ;;if (carrying-food? > 1000) [ give-food c carrying-food? ]
            give-food c carrying-food?
            if (energy < 500) [ red-team-ask-for-energy c 500 ]
            let rdtemp random 100
            
            ;; if we carry more than xxx, and we haven't found food in the previous turn
            if (carrying-food? > 1000) []
            ifelse (rdtemp < tom-harvester-job-switch) [
              set mem0 replace-item 0 mem0 0
            ][
              set mem0 replace-item 0 mem0 3
            ]
          ]
        ]
        ][ ifelse (item 0 mem0 = 2) [
          ;; bring back the resource to the base : they know where to find the food !
          
          tom-harvester-take-food
          
          let temp tom-move-back-to-base
          let c min-one-of my-bases [ distance myself ]
          if (c != nobody and distance c <= 2) [
            ;;if (carrying-food? > 1000) [ give-food c carrying-food? ]
            give-food c carrying-food?
            if (energy < 500) [ red-team-ask-for-energy c 500 ]
            let rdtemp random 100
            ifelse (rdtemp < tom-harvester-job-switch) [
              set mem0 replace-item 0 mem0 0
            ][
              set mem0 replace-item 0 mem0 3
            ]
          ]
          ][ if (item 0 mem0 = 3) [
            ;; farming :
            ;; go near base, on an empty plot
            ;; then plant seed
            ;; if burger is ready, collect it
            ;; give food if we have any
            
            tom-harvester-take-food
            set mem0 replace-item 0 mem0 0
          ]
        ]
      ]
    ]
  ]
  
end

to goRedBase
  ;; produces a robot
  ifelse (item 0 mem1 > 0)
  [
    new-Harvester self
    let temp item 0 mem1 - 1
    set mem1 replace-item 0 mem1 temp
  ]
  [
    if (item 1 mem1 > 0)
    [
      ;; replace-item 1 mem1 42
      let temp item 1 mem1 - 1
      set mem1 replace-item 1 mem1 temp
      new-Explorer self
    ]
  ]
  if (item 0 mem1 = 0 AND item 1 mem1 = 0)
  [
    set mem0 0
  ]
  ;; add explorer to queue
  if (mem0 = 0 AND energy > 3500)
  [
    set mem1 replace-item 1 mem1 1
    set mem0 1
  ]
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
  set mem0 list 0 0
  set mem1 list 0 0
  ;; if the enemy base indicated in mem1 is destroyed
  set mem2 0
  ;; if the base knows food position and enemy base position
  set mem3 list 0 0
  let closest-base min-one-of my-bases [ distance myself ]
  ;; if the base already knows a food position, search enemy base
  if (item 0 [mem2] of closest-base != 0 or item 1 [mem2] of closest-base != 0)
  [
    set mem3 replace-item 0 mem3 1
    set mem0 list 2 0
  ]
  ;; if the base already knows an enemy base, switch to appropriate state
  if (item 0 [mem3] of closest-base != 0 or item 1 [mem3] of closest-base != 0)
  [
    set mem3 replace-item 1 mem3 1
    tom-switch-to-kamikaze-or-return-base
  ]
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
  set mem0 list 0 0
  set mem1 list 0 0
  set mem2 0
end

;; procedure pour initialiser les bases rouges
to initRedBase
  tom-init-parameters
  
  new-Harvester self
  let temp1 tom-init-nbr-harvesters - 1
  set mem1 list temp1 tom-init-nbr-explorers
  set mem0 1
  ;; food position
  set mem2 list 0 0
  ;; enemy base position
  set mem3 list 0 0
end
