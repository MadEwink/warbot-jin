;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; le code de l'equipe rouge basique
;; prÃ©fixe : red-team
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Parameters below

globals [
  tom-init-nbr-explorers
  tom-init-nbr-harvesters
  tom-proportion-kamikaze
]

to tom-init-parameters
  set tom-init-nbr-explorers 1
  set tom-init-nbr-harvesters 1
  set tom-proportion-kamikaze 100
end

to red-team-ask-for-energy [ b n ]
  ask b [ if (energy > 6000) [ give-energy myself n ]]
end

to red-team-go-back-to-base
  if (carrying-food? > 1000) or (energy < 500) or ((Breed = RocketLaunchers) and (nb-missiles = 0))
  [
    let b min-one-of my-bases [ distance myself ]
    if (b != nobody) [
      ifelse (distance b <= 2)
      [ 
        if (carrying-food? > 1000) [ give-food b carrying-food? ]
        if (energy < 500) [ red-team-ask-for-energy b 500 ]
        if ((Breed = RocketLaunchers) and (nb-missiles = 0)) [
          red-team-ask-for-energy b 500
          new-missile 5
        ]
      ]
      [
        set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
    ]    
  ]
end

to red-team-go-and-eat
  if ((breed = RocketLaunchers and (mem5 = 0)) or (breed = Explorers)) [
    random-move
  ]
end

to red-team-harvesters-go-and-eat
  let b min-one-of perceive-food [ distance self ]
  ifelse (b != nobody) [ 
    ifelse (distance b) <= 2
      [ take-food b ]
      [ set heading towards b - 20 + random 40
        if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
        forward-move speed
      ]
  ]
  [ random-move ]
end

to-report red-team-no-target?
  report mem5 = 0
end

to red-team-set-target [ x y espece ]
  set mem0 x set mem1 y set mem2 espece set mem5 1
end

to red-team-call-rocket-launcher [ x y espece ]
  let rl min-one-of perceive-specific-robots color RocketLaunchers [ distancexy x y ]
  if (rl != nobody) [ ask rl [ red-team-set-target x y espece ]]
end

to red-team-call-explorer [ x y espece ]
  let ex one-of perceive-specific-robots color Explorers
  if (ex != nobody) [
    ask ex [
      set mem0 x 
      set mem1 y
      set mem2 espece
      set mem5 1
    ]
  ]
end

to red-team-select-target
  if (red-team-no-target?)
  [
    let h min-one-of perceive-robots ennemy [ distance myself ]
    ifelse ( h != nobody ) [
      set mem0 [xcor] of h
      set mem1 [ycor] of h
      set mem2 [breed] of h
      set mem5 1
    ]
    [ set mem5 0 ]
  ]
end

to red-team-shoot 
  if (not red-team-no-target?) 
  [
    ifelse (distancexy mem0 mem1 < detection-range)
    [ launch-rocket towardsxy mem0 mem1 set mem5 0]
    [ set heading towardsxy mem0 mem1 - 20 + random 40
      if count turtles in-cone 2 90 with [ (breed != Burgers) and (breed != Perceptions) ] != 1 [ rt random 90 ]
      forward-move speed
    ]
  ]
  
end

to goRedExplorer
  
end

to goRedRocketLauncher
  
end

to goRedHarvester
  ;; switch case on the state of self
  ;; 0 Wandering : goes in random directions, while trying to dodge objects
  ;; 1 Collecting : goes to a resource location known or indicated by an Explorer
  ;; 2 Retrieving : brings a resource bask to the base
  ;; 3 Farming : Plant seeds and harvest seeds around base

  ifelse (item 0 mem0 = 0) [
    ;; use the random dir of MadEwink
  ][ ifelse (item 0 mem0 = 1) [
      ;; collecting resources
      
      let b min-one-of perceive-food [ distance self ]
      ;; if resource in range :
      ifelse (b != nobody)[
        take-food b
        ;; switch to state 2, to return to base
        set mem0 replace-item 0 mem1 2
      ][
        ;; else :
        let tempx item 0 mem1
        let tempy item 1 mem1
        facexy tempx tempy
        ;;set heading towards angle-to-base
        ;; may collide with a wall
        forward-move speed
      ]
    ][ ifelse (item 0 mem0 = 2) [
        ;; bring back the resource to the base : they know where to find the food !
        red-team-go-back-to-base
      ][ if (item 0 mem0 = 3) [
          ;; farming
        ]
      ]
    ]
  ]
  
end

to goRedBase
  ;; produces a robot
  ifelse (item 0 mem1 > 0)
  [
    new-Harvester self
    ;; nik
    let temp item 0 mem1 - 1
    set mem1 replace-item 0 mem1 temp
  ]
  [
    if (item 1 mem1 > 0)
    [
      ;; replace-item 1 mem1 42
      let temp item 1 mem1 - 1
      set mem1 replace-item 1 mem1 temp
      new-Explorer self
    ]
  ]
  
end

;; procedure pour initialiser les explorers rouges
to initRedExplorer
  set mem0 list 0 0
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedRocketLauncher
end

;; procedure pour initialiser les rocket-launchers rouges
to initRedHarvester
end

;; procedure pour initialiser les bases rouges
to initRedBase
  tom-init-parameters
  
  new-Harvester self
  let temp1 tom-init-nbr-harvesters - 1
  set mem1 list temp1 tom-init-nbr-explorers
end
